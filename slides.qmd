---
title: "Markov Decision Making"
author: "Ritsaart Bergsma, Jeroen Landman, Witek ten Hove"
format:
   revealjs:
     slideNumber: true
     transition: 'fade'
     controls: true
     progress: true
     history: true
     previewLinks: true
     margin: 0.05
editor: visual
jupyter: python3
---

## Service control problem

![](service-control.png)

## Unichain

::::: columns
::: {.column width="60%"}
**Definition**

*A unichain is a finite-state Markov chain that contains a single recurrent class and possibly, some transient states.*
:::

::: {.column width="40%"}
```{python}
from graphviz import Digraph

# Create a new directed graph
f = Digraph(format='png')
f.attr(rankdir='TD', nodesep='1.0', ranksep='0.8')  # Increased nodesep and ranksep for more space between nodes

# Define the nodes
f.attr('node', shape='circle')
f.node('T1')
f.node('T2')
f.node('T3')
f.node('R1')
f.node('R2')

# Define the transitions
f.edge('[*]', 'T1')
f.edge('[*]', 'T2')
f.edge('[*]', 'T3')
f.edge('T1', 'R1')
f.edge('T2', 'R1')
f.edge('T3', 'R2')
f.edge('R1', 'R2')
f.edge('R2', 'R1')
f.edge('R1', 'R1')
f.edge('R2', 'R2')

# Render the graph
#f.render('unichain_example_diagram', view=False)
```

![Unichain example](unichain_example_diagram.png)
:::
:::::

## Aggregate states

::: {#fig-unichain layout-ncol="2"}
![Always b0](unichain_always_b0_diagram.png){#fig-always width="480"}

![Don't change](unichain_b0_b1_b2_diagram.png){#fig-dont width="480"}

Policy examples
:::
