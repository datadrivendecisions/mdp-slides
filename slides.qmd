---
title: "Markov Decision Making"
subtitle: "<a href='https://datadrivendecisions.github.io/mdp-slides/slides.html#/title-slide' target='_blank'>Follow along here</a>"
author:
   - name: "Ritsaart Bergsma"
     affiliation: "Windesheim UAS / VU"
   - name: "Jeroen Landman"
     affiliation: "Bol.com"
   - name: "Witek ten Hove"
     affiliation: "HAN UAS / VU"
format:
   revealjs:
     slideNumber: true
     transition: 'fade'
     controls: true
     progress: true
     history: true
     previewLinks: true
     margin: 0.05
     revealjs-plugins:
     - pdfexport
editor: visual
jupyter: python3
---

## Service control problem

![](service-control.png)

## Model overview {.smaller}

-   **Decision Epochs:**
    -   Denoted as $T = \{0, 1, 2, \dots\}$
    -   Correspond to observation times $0, \eta, 2\eta, \dots$
-   **State Space:**
    -   State $s = (x, b)$ consists of:
        -   Number of jobs $x \in X = \{0, 1, 2, \dots, 8\}$
        -   Number of jobs $b \in B = \{0, 1, 2\}$ in the buffer
-   **Actions:**
    -   $a \in A = \{0, 1, 2\}$
    -   Equivalent to selecting a service rate $b' \in B$ for the next epoch
    
## Model overview - cont. {.smaller}

-   **Transition Probabilities:**
    -   Depend on the arrival rate (Poisson distribution, rate = $1.5$ jobs per period of length $\eta$) and the chosen service rate $b'$

## Model overview - cont. {.smaller}

-   **Immediate costs:**

    -   **Service completion reward:**
        -   For each random number of service completions $n \sim f_b(n)$ system receives a reward of $R = 5$
    -   **Holding cost:**
        -   Expected holding cost per period: $h(x) = 2x$
    -   **Service rate change cost:**
        -   Fixed cost of $K = 3$ incurred if the controller changes the service rate ($b \neq b'$)
    -   **Service rate usage cost:**
        -   Cost $d(b')$ depends on the chosen service rate $b'$:
            -   $d(0) = 0, \quad d(1) = 2, \quad d(2) = 5$

## Solution methods {.smaller}

-   **Linear programming (LP):**

    -   with average cost criterion
    -   with average cost criterion and restriction on service rate 2

-   **Value iteration (VI)** [**(Check)**]{style="color: tomato"}

## Unichain

::::: columns
::: {.column width="60%"}
**Definition**

*A unichain is a finite-state Markov chain that contains a single recurrent class and possibly, some transient states.*
:::

::: {.column width="40%"}
```{python}
from graphviz import Digraph

# Create a new directed graph
f = Digraph(format='png')
f.attr(rankdir='TD', nodesep='1.0', ranksep='0.8')  # Increased nodesep and ranksep for more space between nodes

# Define the nodes
f.attr('node', shape='circle')
f.node('T1')
f.node('T2')
f.node('T3')
f.node('R1')
f.node('R2')

# Define the transitions
f.edge('[*]', 'T1')
f.edge('[*]', 'T2')
f.edge('[*]', 'T3')
f.edge('T1', 'R1')
f.edge('T2', 'R1')
f.edge('T3', 'R2')
f.edge('R1', 'R2')
f.edge('R2', 'R1')
f.edge('R1', 'R1')
f.edge('R2', 'R2')

# Render the graph
#f.render('unichain_example_diagram', view=False)
```

![Unichain example](unichain_example_diagram.png)
:::
:::::

## Aggregate states

::: {#fig-unichain layout-ncol="2"}
![Always b0](unichain_always_b0_diagram.png){#fig-always width="480"}

![Don't change](unichain_b0_b1_b2_diagram.png){#fig-dont width="480"}

Policy examples
:::

## Solution 1: LP

![Optimality criterion: average cost](averagecost.png){width="700"}

## Solution 2: LP with restriction

![Optimality criterion: average cost with restriction on service rate 2](averagecostrestr.png)

## Check: Value iteration

<iframe src="value-iteration.html" width="720px" height="540px">

</iframe>

## Policy simulation {.scrollable}

<iframe src="policy-sim.html" width="720px" height="540px">

</iframe>

## Policy simulation - average cost {.scrollable}

<iframe src="average-cost.html" width="720px" height="540px">

</iframe>
